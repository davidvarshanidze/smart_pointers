Smart pointers (std::unique_ptr) C++11
what are they: smart pointer is an object that lives on stack behaves like raw pointer but automatically manages memory
how they work: Smart pointers store a raw pointer to dynamically allocated memory. They overload the * and -> operators to behave like normal pointers. When the smart pointer goes out of scope, it automatically deletes the allocated memory.

A raw pointer is just a variable that holds an address in memory. It does not do anything beyond storing a memory location.
A smart pointer wraps a raw pointer inside an object and provides additional behavior.

Why is it an Object?
Because it encapsulates:
1. A raw pointer (like int*).
2. A destructor that automatically deletes the pointer.
3. Operator overloads (*, ->) to make it behave like a pointer.
Key Differences from a Raw Pointer
âœ” Encapsulates a pointer inside an object.â€¨âœ” Automatically deletes memory in the destructor.â€¨âœ” Overloads * and ->, so it behaves like a pointer.â€¨âœ” Prevents copy operations to avoid accidental double deletion.
Why Not Just Use Raw Pointers?
* Raw pointers require manual memory management (new / delete).
* Smart pointers automate cleanup and prevent memory leaks.
By making smart pointers objects, C++ enforces RAII (Resource Acquisition Is Initialization), ensuring proper cleanup.

4 Types of smart pointers
std::unique_ptr
std::shared_ptr
std::weak_ptr
std::auto_ptr

Smart Pointer	Ownership Model	When is Memory Freed?
std::unique_ptr	Exclusive ownership (only one owner)	When the unique_ptr goes out of scope
std::shared_ptr	Shared ownership (multiple owners)	When the last shared_ptr reference goes out of scope
std::weak_ptr	Non-owning reference to a shared_ptr	Does not control memory, used to prevent cyclic dependencies

Unique Pointers

A unique_ptr is a stack-allocated object that manages heap memory and cannot be copied.
âœ” No need to call delete manually!
âœ– Cannot be copied, only moved (std::move())

Shared Pointer

A shared_ptr allows multiple smart pointers to share ownership of the same object. It uses reference counting to track the number of owners.
âœ” Reference counting ensures memory is freed when the last owner disappears.
âœ– Slight performance overhead due to reference counting.

âœ” Reference counting ensures memory is freed when the last owner disappears.
âœ– Slight performance overhead due to reference counting.

Weak Pointer

A weak_ptr does not control the lifetime of the object. It is used to avoid cyclic dependencies in shared_ptr usage.
âœ” Prevents memory leaks in cyclic dependencies.
âœ– Does not prevent the object from being destroyed.

How Smart Pointers Prevent Bugs Like Double Deletion and Dangling Pointers

One of the biggest dangers of raw pointers in C++ is manual memory management mistakesâ€”like double deletion, memory leaks, and dangling pointers. Smart pointers solve these problems automatically.

1. The Problem: Double Deletion
A double deletion happens when delete is called twice on the same pointer, causing undefined behavior (often crashes).
ðŸš¨ Danger: The second delete tries to free already-freed memory, causing crashes or memory corruption.
Solution with Smart Pointers
A unique_ptr automatically deletes the memory when it goes out of scope and prevents double deletion.
âœ” Safe: No chance of calling delete twice.

2. The Problem: Dangling Pointers
A dangling pointer happens when a pointer still points to freed memory.
Accessing it leads to undefined behavior (crashes or data corruption).
ðŸš¨ Danger: p is pointing to deleted memory!
Solution with Smart Pointers
A smart pointer automatically frees memory and prevents access to invalid memory.
âœ” Safe: The memory is never accessed after deletion.

3. The Problem: Memory Leaks
A memory leak happens when memory is allocated but never freed, causing the program to use more and more memory over time.
ðŸš¨ Danger: The program will consume all memory and eventually crash.
Solution with Smart Pointers
A smart pointer automatically deallocates memory when it goes out of scope.
âœ” Safe: The memory is freed every time no_leak() returns.

4. The Problem: Shared Ownership and Cyclic References
shared_ptr uses reference counting, so when the last shared_ptr goes out of scope, the object is deleted.
âœ” Safe: Foo is deleted only once.

The Problem: Cyclic References (Memory Leak)
A cycle can form when two shared_ptrs reference each other, preventing deletion.
ðŸš¨ Danger: a1 and a2 are never deleted because they hold strong references to each other.
Solution: Use weak_ptr
A weak_ptr does not increase the reference count, breaking the cycle.
âœ” Safe: No memory leak!
